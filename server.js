const express = require('express');
const { Client } = require('@notionhq/client');
const axios = require('axios');
const axiosRetry = require('axios-retry').default;
const moment = require('moment');
const fs = require('fs');
const cron = require('node-cron');
const app = express();
const PORT = 3000;
const fetch = require('node-fetch');
const { SocksProxyAgent } = require('socks-proxy-agent');
const dotenv = require('dotenv');
dotenv.config();

// –ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
const proxyUrl = process.env.PROXY_URL;
const agent = new SocksProxyAgent(proxyUrl);

// –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è fetch
const customFetch = (url, options) => {
    return fetch(url, {
      ...options,
      agent: new SocksProxyAgent(proxyUrl),
      timeout: 10000  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 10 —Å–µ–∫—É–Ω–¥
    });
  };
const THRESHOLD_SEC = 20;
// –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π middleware
app.use(express.json());

axiosRetry(axios, {
  retries: 5,
  retryDelay: (retryCount) => {
    console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞: ${retryCount}`);
    return retryCount * 10000;  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  },
  retryCondition: (error) => {
    return error.code === 'ECONNRESET' || error.response?.status >= 500;
  }
});

const PATHS = {
    webhookData: './webhookData.json',
    idPairs: './idPairs.json',
    companyPairs: './companyPairs.json',
    cacheId: './cacheId.json',
    pachcaUsers: './PachcaUsers.json',
    channelInfo: './channelInfo.json',
    scheduledTasks: './scheduledTasks.json',
    customIdPairs: './customIdPairs.json',
    ID_URL_PATH: './idurl.json',
    LAST_ID_PATH: './lastTs.txt',
    IDCOM_PATH: './idcom.json'
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Notion API
const notion = new Client({
    auth: process.env.NOTION_TOKEN,
    fetch: (url, options) => customFetch(url, {
      ...options,
      timeout: 5000,  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
    })
  });

  app.post('/demo', async (req, res) => {
    const { type, event, id: messageId, parent_message_id, content } = req.body;
    console.log(`–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /demo —Å —Ç–∏–ø–æ–º: ${type}, —Å–æ–±—ã—Ç–∏–µ–º: ${event}, parent_message_id: ${parent_message_id}, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º: ${content}`);

    const customIdPairs = loadJsonFile('./customIdPairs.json');
    const idPairs = loadJsonFile('./idPairs.json');

    if (type === 'message' && event === 'new') {
        if (parent_message_id && customIdPairs[parent_message_id]) {
            const { originalMessageId, type: actionType } = customIdPairs[parent_message_id];
            const pageId = idPairs[originalMessageId]; // –ü–æ–ª—É—á–∞–µ–º pageId –ø–æ originalMessageId

            if (!pageId) {
                console.error(`–û—à–∏–±–∫–∞: pageId –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è originalMessageId: ${originalMessageId}`);
                return res.status(400).send('pageId –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è originalMessageId');
            }

            console.log(`–ù–∞–π–¥–µ–Ω pageId: ${pageId} –¥–ª—è originalMessageId: ${originalMessageId} –∏ –¥–µ–π—Å—Ç–≤–∏—è: ${actionType}`);

            if (actionType === 'date') {
                const parsedDate = parseDate(content.trim());
                if (parsedDate) {
                    console.log(`–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è pageId: ${pageId} —Å –¥–∞—Ç–æ–π: ${parsedDate}`);
                    await updateNotionDemoDateByPageId(pageId, parsedDate);
                    const responseMessage = await sendReaction(messageId);
                    if (responseMessage.status === 200) {
                        console.log('–†–µ–∞–∫—Ü–∏—è üëç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                    }
                    res.status(200).send('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Notion');
                } else {
                    console.error('–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã');
                    res.status(400).send('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã');
                }
            } else if (actionType === 'context') {
                console.log(`–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è pageId: ${pageId}`);
                await addContextToNotionPage(pageId, content);
                const responseMessage = await sendReaction(messageId);
                if (responseMessage.status === 200) {
                    console.log('–†–µ–∞–∫—Ü–∏—è üëç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
                }
                res.status(200).send('–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ Notion');
            } else {
                console.error('–û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è');
                res.status(400).send('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è');
            }
        } else {
            console.error('–û—à–∏–±–∫–∞: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');
            res.status(400).send('–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω');
        }
    } else {
        console.error('–û—à–∏–±–∫–∞: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è');
        res.status(400).send('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è');
    }
});

app.post('/sale', async (req, res) => {
  const data = req.body;
  // --- –û–ë–†–ê–ë–û–¢–ö–ê message/new/thread WEBHOOK ---
  if (
    data.type === 'message' &&
    data.event === 'new' &&
    data.entity_type === 'thread' &&
    data.thread?.message_id
  ) {
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Pachca API
    const headers = {
      'Authorization': `Bearer ${process.env.PACHCA_TOKEN1}`,
      'Content-Type': 'application/json; charset=utf-8',
      'User-Agent': 'YourApp/1.0'
    };
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–∑–¥–∞–Ω —Ç—Ä–µ–¥
      const resp = await axios.get(
        `https://api.pachca.com/api/shared/v1/messages/${data.thread.message_id}`,
        { headers }
      );
      const content = resp.data.data.content;
      // 2. –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–æ–º–ø–∞–Ω–∏–∏
      const companyId = extractCompanyId(content);
      if (companyId) {
        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        const idcom = loadIdCom();
        idcom[companyId] = data.content;
        saveIdCom(idcom);
        console.log(`–ö–µ—à–∏—Ä–æ–≤–∞–Ω–æ: [${companyId}] => ${data.content}`);
      } else {
        console.log('ID –ö–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∫–µ—à –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω');
      }
      return res.sendStatus(200);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ message/new:', err);
      return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ message');
    }
  }
  // –û–ë–†–ê–ë–û–¢–ö–ê –°–ß–ï–¢–ê
  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—á–µ—Ç–∞:', data);

  let lastId = null;
  try {
    lastId = fs.readFileSync(PATHS.LAST_ID_PATH, 'utf8');
  } catch {}
  if (lastId && Number(lastId) === data.id) {
    console.log(`–ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ID=${data.id}`);
    return res.sendStatus(200);
  }
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π ID
  fs.writeFileSync(PATHS.LAST_ID_PATH, String(data.id));

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Pachca API
  const headers = {
    'Authorization': `Bearer ${process.env.PACHCA_TOKEN1}`,
    'Content-Type': 'application/json; charset=utf-8',
    'User-Agent': 'YourApp/1.0'
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ URL –º–∞–ø–ø–∏–Ω–≥–∞
  const mappings = loadIdUrlMappings();
  let threadUrl = mappings[data.id];
  let isNew = !threadUrl;

  // –ï—Å–ª–∏ –Ω–µ—Ç URL, –∏—â–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–¥
  if (isNew) {
    try {
      const foundMsgId = await findMessageWithId(data.id, headers);
      if (foundMsgId) {
        console.log(`–ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${foundMsgId}`);
        const threadResp = await axios.post(
          `https://api.pachca.com/api/shared/v1/messages/${foundMsgId}/thread`,
          {},
          { headers }
        );
        threadUrl = `https://app.pachca.com/chats?thread_id=${threadResp.data.data.id}`;
        isNew = false;
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', err);
    }
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
  const period = {
    startDate: moment().format('YYYY-MM-DD'),
    endDate: calculateEndDate(data.months_count)
  };
  // –ó–∞–≥—Ä—É–∑–∫–∞ extra content (idcom)
  const idcom = loadIdCom();
  const extraContent = idcom[data.id] ? `\n\`${idcom[data.id]}\`` : '';
  // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  const content = isNew
    ? `‚öæ üèåüèº‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç **${data.name}** –∑–∞–ø—Ä–æ—Å–∏–ª —Å—á–µ—Ç!\nID –ö–æ–º–ø–∞–Ω–∏–∏: ${data.id}\n–ü–æ—á—Ç–∞: ${data.email}\n–ò–ù–ù: ${data.inn}\n–¢–∞—Ä–∏—Ñ: ${data.plan}\n–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **${data.licenses_total}**\n–ü–µ—Ä–∏–æ–¥: **${data.months_count}**\n* –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –≠–í–ú "–ü–∞—á–∫–∞", –º–æ–¥—É–ª—å "${data.plan}" –Ω–∞ —Å—Ä–æ–∫ —Å ${period.startDate} –ø–æ ${period.endDate})${extraContent}`
    : `ü•≥ üöÄ–ö–æ–º–ø–∞–Ω–∏—è **${data.name}** –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –Ω–æ–≤—ã–π —Å—á–µ—Ç!\nID –ö–æ–º–ø–∞–Ω–∏–∏: ${data.id}\n–ü–æ—á—Ç–∞: ${data.email}\n–ò–ù–ù: ${data.inn}\n–¢–∞—Ä–∏—Ñ: ${data.plan}\n–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **${data.licenses_total}**\n–ü–µ—Ä–∏–æ–¥: **${data.months_count}**\n* –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –≠–í–ú "–ü–∞—á–∫–∞", –º–æ–¥—É–ª—å "${data.plan}" –Ω–∞ —Å—Ä–æ–∫ —Å ${period.startDate} –ø–æ ${period.endDate}\n[–¢—Ä–µ–¥](${threadUrl})${extraContent}`;


  try {
    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${data.id} (isNew=${isNew})`);
    const sendResp = await axios.post(
      `https://api.pachca.com/api/shared/v1/messages`,
      { message: { entity_type: 'discussion', entity_id: 2342381, content } },
      { headers }
    );
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', sendResp.data);

    if (isNew) {
      const messageId = sendResp.data.data.id;
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}`);
      const threadResp = await axios.post(
        `https://api.pachca.com/api/shared/v1/messages/${messageId}/thread`,
        {},
        { headers }
      );
      threadUrl = `https://app.pachca.com/chats?thread_id=${threadResp.data.data.id}`;
      console.log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ ${threadResp.data.data.id}`);
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL –∏ –Ω–æ–≤–æ–≥–æ webhook_timestamp
    mappings[data.id] = threadUrl;
    saveIdUrlMappings(mappings);

    return res.sendStatus(200);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ /sale:', error);
    return res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
  }
});

function calculateEndDate(monthsCount) {
  return moment().add(monthsCount, 'months').format('YYYY-MM-DD');
}

async function getAllPages(databaseId) {
    let allPages = [];
    let hasMore = true;
    let nextCursor = undefined;

    while (hasMore) {
        try {
            const response = await notion.databases.query({
                database_id: databaseId,
                start_cursor: nextCursor,
            });

            allPages = allPages.concat(response.results);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
            hasMore = response.has_more;
            nextCursor = response.next_cursor;

        } catch (error) {
            console.error('Error querying Notion API:', error);
            if (error.response) {
                console.error('Response data:', error.response.data);
            }
            throw error;
        }
    }

    return allPages;
}
async function createSaleNotionPage(data, endDate) {
    console.log('Creating Notion page for sale...');
    console.log('Data received:', data);
    console.log('End date:', endDate);

    const databaseId = process.env.DATABASE_ID;
    const title_content = data.name;

    try {
        // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        console.log('Sending request to Notion API with the following payload:');
        console.log({
            parent: { database_id: databaseId },
            properties: {
                'Name': {
                    title: [{ text: { content: title_content } }]
                },
                '–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 1': {
                    rich_text: [{ text: { content: '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' } }]
                },
                '–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 2': {
                    rich_text: [{ text: { content: '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ê–∫—Ç–∏–≤–Ω—ã–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' } }]
                },
                '–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 3': {
                    rich_text: [{ text: { content: '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –£—à–µ–¥—à–∏–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' } }]
                },
                '–ö–æ–Ω—Ç–∞–∫—Ç—ã': {
                    rich_text: [{ text: { content: `–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: , –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: ` } }]
                },
                "–≠—Ç–∞–ø": {
                    status: { name: "–ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—á–µ—Ç" }
                },
                "ID": {
                    number: Number(data.id)
                },
                "–ò–ù–ù": {
                    rich_text: [{ text: { content: `${data.inn}` } }]
                },
                "–ü–æ—á—Ç–∞ –∞–¥–º–∏–Ω–∞": {
                    rich_text: [{ text: { content: `${data.email}` } }]
                },
                "–¢–∞—Ä–∏—Ñ": {
                    select: { name: `${data.plan}` }
                },
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": {
                    number: Number(data.licanses_total)
                },
                '–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞': {
                    date: { start: endDate }
                }
            }
        });

        const response = await notion.pages.create({
            parent: { database_id: databaseId },
            properties: {
                'Name': {
                    title: [{ text: { content: title_content } }]
                },
                '–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 1': {
                    rich_text: [{ text: { content: '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' } }]
                },
                '–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 2': {
                    rich_text: [{ text: { content: '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ê–∫—Ç–∏–≤–Ω—ã–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' } }]
                },
                '–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 3': {
                    rich_text: [{ text: { content: '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –£—à–µ–¥—à–∏–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' } }]
                },
                '–ö–æ–Ω—Ç–∞–∫—Ç—ã': {
                    rich_text: [{ text: { content: `–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: , –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: ` } }]
                },
                "–≠—Ç–∞–ø": {
                    status: { name: "–ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—á–µ—Ç" }
                },
                "ID": {
                    number: Number(data.id)
                },
                "–ò–ù–ù": {
                    rich_text: [{ text: { content: `${data.inn}` } }]
                },
                "–ü–æ—á—Ç–∞ –∞–¥–º–∏–Ω–∞": {
                    rich_text: [{ text: { content: `${data.email}` } }]
                },
                "–¢–∞—Ä–∏—Ñ": {
                    select: { name: `${data.plan}` }
                },
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": {
                    number: Number(data.licanses_total)
                },
                '–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞': {
                    date: { start: endDate }
                }
            }
        });

        console.log("Page created with ID:", response.id);
        return response.id;
    } catch (error) {
        console.error("Error creating page in Notion:", error);
        console.log('Response body:', error.body);
        throw error;
    }
}

function calculatePeriod(startDate, monthsCount) {
    const start = moment(startDate);
    const end = start.clone().add(monthsCount, 'months').subtract(1, 'days');
    return {
        startDate: start.format('DD.MM.YYYY'),
        endDate: end.format('DD.MM.YYYY'),
    };
}

async function updateNextPaymentDate(pageId, nextPaymentDate) {
    try {
        await notion.pages.update({
            page_id: pageId,
            properties: {
                '–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞': {
                    date: {start: nextPaymentDate}
                },
                "–≠—Ç–∞–ø": {
                status: {
                    name: "–ó–∞–ø—Ä–æ—Å–∏–ª–∏ —Å—á–µ—Ç"
                    }
                }
            }
        });

        console.log("–ü–æ–ª–µ '–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è '–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞':", error);
    }
}

async function getPaymentInfo(databaseId, targetID, data) {
  console.log(`–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç—ã –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å ID: ${databaseId} –∏ —Ü–µ–ª–µ–≤–æ–≥–æ ID: ${targetID}`);

  try {
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
    const endDate = calculateEndDate(data.months_count);
    console.log(`–í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞: ${endDate}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const allPages = await getAllPages(databaseId);

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    allPages.forEach((page, index) => {
    });

    // –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω—É–∂–Ω—ã–º ID
    const matchingPage = allPages.find(page => {
      const idProperty = page.properties['ID'];
      if (idProperty) {

        let pageIdValue;
        if (idProperty.type === 'number') {
          pageIdValue = idProperty.number;
        } else if (idProperty.type === 'rich_text' && idProperty.rich_text.length > 0) {
          pageIdValue = Number(idProperty.rich_text[0].plain_text);
        } else {
          console.log("ID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —á–∏—Å–ª–æ:", JSON.stringify(idProperty));
          return false;
        }

        return pageIdValue === Number(targetID);
      } else {
        console.log("ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:", JSON.stringify(page, null, 2));
        return false;
      }
    });

    let period;

    if (matchingPage) {
      console.log("–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–π–¥–µ–Ω–æ.");

      const pageId = matchingPage.id;
      const titleProperty = matchingPage.properties['Name'] || matchingPage.properties['–ù–∞–∑–≤–∞–Ω–∏–µ'];
      const title = titleProperty ? titleProperty.title[0]?.text?.content || '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      const threadWithAccount = matchingPage.properties['–¢—Ä–µ–¥ —Å–æ —Å—á–µ—Ç–æ–º']?.rich_text[0]?.text?.content || '–¢—Ä–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω';
      const link = createNotionPageLink(pageId);
      let nextPayment = matchingPage.properties['–°–ª–µ–¥—É—é—â–∞—è –æ–ø–ª–∞—Ç–∞']?.date?.start || '–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';

      if (nextPayment) {
        period = calculatePeriod(nextPayment, data.months_count);
        console.log(`–†–∞—Å—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–π –¥–∞—Ç—ã –æ–ø–ª–∞—Ç—ã: ${period.startDate} - ${period.endDate}`);
      } else {
        console.log("–°–ª–µ–¥—É—é—â–∞—è –¥–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Ä–∞—Å—á–µ—Ç —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã.");
        period = calculatePeriod(moment().format('YYYY-MM-DD'), data.months_count);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
      const url = `https://api.pachca.com/api/shared/v1/messages/`;
      const headers = {
        'Authorization': `Bearer ${process.env.PACHCA_TOKEN1}`,
        'Content-Type': 'application/json; charset=utf-8',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 OPR/107.0.0.0 (Edition Yx GX)'
      };

      const payload = {
        "message": {
          "entity_type": "discussion",
          "entity_id": 2342381,
          "content": `ü•≥ üöÄ–ö–æ–º–ø–∞–Ω–∏—è **${title}** –∑–∞–ø—Ä–æ—Å–∏–ª–∞ –Ω–æ–≤—ã–π —Å—á–µ—Ç!\nID –ö–æ–º–ø–∞–Ω–∏–∏: ${data.id}\n–ü–æ—á—Ç–∞: ${data.email}\n–ò–ù–ù: ${data.inn}\n–¢–∞—Ä–∏—Ñ: ${data.plan}\n–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **${data.licenses_total}**\n–ü–µ—Ä–∏–æ–¥: **${data.months_count}**\n* –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –≠–í–ú "–ü–∞—á–∫–∞", –º–æ–¥—É–ª—å "${data.plan}" –Ω–∞ —Å—Ä–æ–∫ —Å ${period.startDate} –ø–æ ${period.endDate}\n[–¢—Ä–µ–¥](${threadWithAccount}) || [–ö–∞—Ä—Ç–æ—á–∫–∞](${link}).`
        }
      };

      console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º payload:", JSON.stringify(payload, null, 2));
      const response = await axios.post(url, payload, { headers: headers });
      console.log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", response.data);

      await updateNextPaymentDate(pageId, endDate);

    } else {
      console.log('–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.');
      period = calculatePeriod(moment().format('YYYY-MM-DD'), data.months_count);

      const pageId = await createSaleNotionPage(data, endDate);
      const link = createNotionPageLink(pageId);
      const url = `https://api.pachca.com/api/shared/v1/messages/`;
      const headers = {
        'Authorization': `Bearer ${process.env.PACHCA_TOKEN1}`,
        'Content-Type': 'application/json; charset=utf-8',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 OPR/107.0.0.0 (Edition Yx GX)'
      };

      const payload = {
        "message": {
          "entity_type": "discussion",
          "entity_id": 2342381,
          "content": `‚öæ üèåüèº‚Äç‚ôÇÔ∏è–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç **${data.name}** –∑–∞–ø—Ä–æ—Å–∏–ª —Å—á–µ—Ç!\nID –ö–æ–º–ø–∞–Ω–∏–∏: ${data.id}\n–ü–æ—á—Ç–∞: ${data.email}\n–ò–ù–ù: ${data.inn}\n–¢–∞—Ä–∏—Ñ: ${data.plan}\n–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **${data.licenses_total}**\n–ü–µ—Ä–∏–æ–¥: **${data.months_count}**\n* –õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –¥–ª—è –≠–í–ú "–ü–∞—á–∫–∞", –º–æ–¥—É–ª—å "${data.plan}" –Ω–∞ —Å—Ä–æ–∫ —Å ${period.startDate} –ø–æ ${period.endDate}\n[–ö–∞—Ä—Ç–æ—á–∫–∞](${link}).`
        }
      };

      console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º payload –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:", JSON.stringify(payload, null, 2));
      const response1 = await axios.post(url, payload, { headers: headers });
      console.log("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", response1.data);

      const threadId = response1.data.data.id;
      await notion.pages.update({
        page_id: pageId,
        properties: {
          '–¢—Ä–µ–¥ —Å–æ —Å—á–µ—Ç–æ–º': {
            rich_text: [
              { text: { content: `https://app.pachca.com/chats/2342381?thread_message_id=${threadId}`} }
            ]
          }
        }
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏:', error.response.status);
      console.error('–¢–µ–ª–æ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response.data, null, 2));
    }
    return null;
  }
}


app.get('/test', async (req, res) => {
    res.status(200).send('Test ok');
});

/** ========== –ë–ª–æ–∫ —Ä–∞–±–æ—Ç—ã —Å Notion API ========== **/

app.post('/webhook', async (req, res) => {
    const data = req.body;
    fs.writeFileSync(PATHS.webhookData, JSON.stringify(data, null, 2));
    // –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ payload –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–∏—Å
    try {
        await axios.post(process.env.WEBHOOK_URL, data);
        res.status(200).send('Webhook received and forwarded');
    } catch (error) {
        console.error('Error forwarding webhook:', error);
        res.status(500).send('Failed to forward webhook');
    }
});

app.post('/analytic', async (req, res) => {
    const data = req.body;

    if (data.message && data.message.content === '–¥–µ–º–∫–∏') {
        console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–µ–º–æ');

        try {
            const { demoToday, scheduledDemos, unscheduledDemos } = await collectDemoData();

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–µ–º–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            const demoTodayList = demoToday
                .map(demo => `${demo.title} - ${demo.user || '@unknown'}`)
                .filter(Boolean);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–º–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            const scheduledDemosList = scheduledDemos
                .map(demo => `${demo.title} - ${moment(demo.date).format('DD.MM')} - ${demo.user || '@unknown'}`)
                .filter(Boolean);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–º–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            const unscheduledDemosList = unscheduledDemos
                .map(demo => `${demo.title} - ${demo.user || '@unknown'}`)
                .filter(Boolean);

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            const report = `
üü¢–î–µ–º–æ —Å–µ–≥–æ–¥–Ω—è:
${demoTodayList.length ? '- ' + demoTodayList.join('\n- ') : '–ù–µ—Ç –¥–µ–º–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'}

üü°–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:
${scheduledDemosList.length ? '- ' + scheduledDemosList.join('\n- ') : '–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–º–æ'}

üî¥–ù–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:
${unscheduledDemosList.length ? '- ' + unscheduledDemosList.join('\n- ') : '–ù–µ—Ç –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–º–æ'}
            `;

            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–µ–º–æ:', report);
            await sendDemoReport(report);
            res.status(200).send('–û—Ç—á–µ—Ç –æ –¥–µ–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ:', error);
            res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ.');
        }
    } else {
        res.status(400).send('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç');
    }
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–µ–º–æ —Å —É—á–µ—Ç–æ–º —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function collectDemoData() {
    const idPairs = loadJsonFile(PATHS.idPairs);
    let demoToday = [];
    let scheduledDemos = [];
    let unscheduledDemos = [];
    const today = moment().startOf('day');

    for (const [messageId, pageId] of Object.entries(idPairs)) {
        try {
            const page = await notion.pages.retrieve({ page_id: pageId });
            const title = page.properties['Name']?.title[0]?.text?.content || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞—è–≤–∫–æ–π –Ω–∞ —Ç–∞–±–ª–∏—Ü—É –∏–ª–∏ –Ω–∞ –¥–µ–º–æ
            const isTableRequest = title.includes(', –ù–∞ —á—Ç–æ –ø—Ä–∏—à–ª–∏: –ó–∞—è–≤–∫–∞ –Ω–∞ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ø–æ–ø–∞–ø');
            const isDemoRequest =
                title.includes(', –ù–∞ —á—Ç–æ –ø—Ä–∏—à–ª–∏: –°–æ–∑–≤–æ–Ω –ø–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É –ì–ª–∞–≤–Ω–∞—è') ||
                title.includes(', –¢–∞–±–ª–∏—Ü–∞ + –î–µ–º–æ');

            if (isTableRequest) continue;  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
            if (!isDemoRequest) continue;  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –¥–µ–º–æ –∑–∞—è–≤–∫–∏

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è "–≠—Ç–∞–ø"
            const stageStatus = page.properties['–≠—Ç–∞–ø']?.status?.name;
            if (stageStatus !== '–ü—Ä–æ–≤–æ–¥–∏–º –¥–µ–º–æ') continue;

            const companyName = cleanTitle(title);
            const demoDate = page.properties['–î–∞—Ç–∞ –¥–µ–º–æ']?.date?.start;

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–∞–∫—Ü–∏–µ–π
            const userReaction = await getUserByReaction(messageId);

            const logEntry = {
                pageId,
                messageId,
                title: companyName,
                date: demoDate || '–î–∞—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                user: userReaction || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                stageStatus,
            };

            if (demoDate) {
                const demoMoment = moment(demoDate);
                if (demoMoment.isSame(today, 'day')) {
                    demoToday.push(logEntry);
                    console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ demoToday:`, logEntry);
                } else if (demoMoment.isAfter(today)) {
                    scheduledDemos.push(logEntry);
                    console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ scheduledDemos:`, logEntry);
                }
            } else {
                unscheduledDemos.push(logEntry);
                console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ unscheduledDemos:`, logEntry);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å ID ${pageId}:`, error);
        }
    }

    return { demoToday, scheduledDemos, unscheduledDemos };
}

app.post('/data', async (req, res) => {
    const { type, code, event, id, user_id } = req.body;
    const messageId = type === 'message' ? id : type === 'reaction' ? req.body.message_id : null;

    if (req.body.user_id === 371852 && type === 'message') {
        try {
            const url = `https://api.pachca.com/api/shared/v1/messages/${id}/thread`;
            const headers = {
                'Authorization': `Bearer ${process.env.PACHCA_TOKEN2}`,
                'Content-Type': 'application/json; charset=utf-8',
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 OPR/107.0.0.0 (Edition Yx GX)'
            };
            const response = await axios.post(url, {}, { headers: headers });
            const thread_id = response.data.data.id;
            const rawData = fs.readFileSync(PATHS.webhookData, 'utf8');
            const data = JSON.parse(rawData);
            const pageId = await createNotionPage(data);
            await saveCompanyInfo(pageId, data.payload.data.Company);
            const notionPageLink = createNotionPageLink(pageId);
            await sendLinkMessage(thread_id, notionPageLink, messageId);
            await saveIdPair(messageId, pageId);
            return res.json({ message: 'Page created', pageId: pageId });
        } catch (error) {
            return res.status(500).send('Failed to create page');
        }
    } else if (type === 'reaction' && code === '‚ûï') {
        if (event === 'new') {
            try {
                const cachedId = readCacheId();
                console.log(`Cached ID: ${cachedId}`);
                console.log(`Current Message ID: ${messageId}`);
                if (cachedId) {
                    const cachedPageId = getPageIdById(cachedId);
                    console.log(cachedPageId);
                    const pageId = getPageIdById(messageId);
                    console.log(messageId);
                    if (!pageId) {
                        console.error('No page ID found for the given message ID');
                        return res.status(404).send('No page found');
                    }
                    await updateNotionPage4(pageId);
                    await deleteNotionPage(cachedPageId);

                    const rawIdPairs = fs.readFileSync(PATHS.idPairs, 'utf8');
                    const idPairs = JSON.parse(rawIdPairs);
                    delete idPairs[cachedId];
                    fs.writeFileSync(PATHS.idPairs, JSON.stringify(idPairs, null, 2));
                    console.log('Page and corresponding ID pair deleted successfully');
                    res.send('Cache processed and cleared');
                    clearCacheId();
                } else {
                    saveCacheId(messageId);
                    return res.send('Message ID cached');
                }
            } catch (error) {
                return res.status(500).send('Error processing reaction');
            }
        } else if (event === 'delete') {
            clearCacheId();
            return res.send('Cache cleared on delete');
        }
    } else if (type === 'reaction' && (code === '‚úÖ' || code === '‚ùå' || code === '‚úèÔ∏è')) {
        const pageId = getPageIdById(messageId);
        if (!pageId) {
            console.error('Page ID not found for given message ID');
            return res.status(404).send('Page ID not found');
        }
        if (event === 'delete' && (code === '‚úÖ' || code === '‚úèÔ∏è')) {
            await updateNotionPage3(pageId);

            return res.send('Page reset');
        }
        switch (code) {
            case '‚úÖ':
                await updateNotionPage(pageId, user_id);
                const delay = 15 * 60 * 1000; // 1 –º–∏–Ω—É—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

                console.log(`–ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ ${delay / 1000} —Å–µ–∫—É–Ω–¥`);

                const scheduledMessageId = messageId;
                const scheduledUserId = user_id;

                setTimeout(() => {
                    console.log(`–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è messageId: ${scheduledMessageId}, user_id: ${scheduledUserId} –≤ ${new Date().toISOString()}`);
                     handleReactionTask(scheduledMessageId, scheduledUserId);
                }, delay);

                console.log(`–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é setTimeout`);
                res.send('Page updated');
                break;
            case '‚ùå':
                await deleteNotionPage(pageId);
                try {
                    const rawIdPairs = fs.readFileSync(PATHS.idPairs, 'utf8');
                    const idPairs = JSON.parse(rawIdPairs);
                    delete idPairs[messageId];
                    fs.writeFileSync(PATHS.idPairs, JSON.stringify(idPairs, null, 2));
                    res.send('Page and corresponding ID pair deleted');
                } catch (error) {
                    console.error('Failed to delete ID pair:', error);
                    return res.status(500).send('Failed to delete ID pair');
                }
                break;
            case '‚úèÔ∏è':
                await updateNotionPage2(pageId, user_id);
                res.send('Page updated with new name');
                break;
            default:
                res.status(400).send('Invalid reaction code');
                break;
        }
    } else {
        res.status(400).send('Invalid conditions for action');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion
async function createNotionPage(data) {
    const databaseId = process.env.DATABASE_ID;
    const title_content = `${data.payload.data.Company}, –ù–∞ —á—Ç–æ –ø—Ä–∏—à–ª–∏: ${data.payload.name}`;
    try {
        const response = await notion.pages.create({
            parent: { database_id: databaseId },
            properties: {
                'Name': {
                    title: [
                        { text: { content: title_content } }
                    ]
                },
                '–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 1': {
                    rich_text: [
                        { text: { content: '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' } }
                    ]
                },
                '–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 2': {
                    rich_text: [
                        { text: { content: '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –ê–∫—Ç–∏–≤–Ω—ã–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' } }
                    ]
                },
                '–ù–∞–∑–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 3': {
                    rich_text: [
                        { text: { content: '‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –£—à–µ–¥—à–∏–µ ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî' } }
                    ]
                },
                '–ö–æ–Ω—Ç–∞–∫—Ç—ã': {
                    rich_text: [
                        { text: { content: `–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${data.payload.data.Phone}, –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ ${data.payload.data.Name}` } }
                    ]
                },
                '–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏': {
                    date: { start: data.payload.submittedAt }
                }
            }
        });

        console.log("Page created with ID:", response.id);
        return response.id;
    } catch (error) {
        console.error("Error creating page in Notion:", error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion
async function updateNotionPage(pageId, user_id) {
    const userName = readPachcaUsers(user_id);
    return notion.pages.update({
        page_id: pageId,
        properties: {
            "–≠—Ç–∞–ø": {
                status: {
                    name: "–ü—Ä–æ–≤–æ–¥–∏–º –¥–µ–º–æ"
                }
            },
            '–û—Ç–∫—É–¥–∞ –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏': {
                rich_text: [
                    { text: { content: `–†–µ–∞–∫—Ü–∏—é –æ—Å—Ç–∞–≤–∏–ª(–∞): ${userName}` } }
                ]
            }
        }
    });
}

async function updateNotionPage2(pageId, user_id) {
    const userName = readPachcaUsers(user_id);
    return notion.pages.update({
        page_id: pageId,
        properties: {
            "–≠—Ç–∞–ø": {
                status: {
                    name: "–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—É"
                }
            },
            '–û—Ç–∫—É–¥–∞ –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏': {
                rich_text: [
                    { text: { content: `–†–µ–∞–∫—Ü–∏—é –æ—Å—Ç–∞–≤–∏–ª(–∞): ${userName}` } }
                ]
            }
        }
    });
}

async function updateNotionPage3(pageId) {
    return notion.pages.update({
        page_id: pageId,
        properties: {
            "–≠—Ç–∞–ø": {
                status: {
                    name: "–ó–∞—è–≤–∫–∞"
                }
            },
            '–û—Ç–∫—É–¥–∞ –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏': {
                rich_text: [
                    { text: { content: `` } }
                ]
            }
        }
    });
}

async function updateNotionPage4(pageId) {
    const notionPageLink = createNotionPageLink(pageId);
    const companyName = companyPairs[pageId];
    const companyPairs = loadCompanyPairs(); // –ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞—Ä—ã –∫–æ–º–ø–∞–Ω–∏
    const url = `https://api.pachca.com/api/shared/v1/messages`;
    const body = {
        "message": {
            "entity_type": "discussion",
            "entity_id": 4624312,
            "content": `–ö–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ${companyName} –±—ã–ª–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: [link](${notionPageLink})`
        }
    };
    const headers = {
        'Authorization': `Bearer ${process.env.PACHCA_TOKEN1}`,
        'Content-Type': 'application/json; charset=utf-8',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36 OPR/107.0.0.0 (Edition Yx GX)'
    };
    await axios.post(url, body, { headers: headers });
    return notion.pages.update({
        page_id: pageId,
        properties: {
            'Name': {
                title: [
                    { text: { content: `${companyName}, –¢–∞–±–ª–∏—Ü–∞ + –î–µ–º–æ ` } }
                ]
            },
            "–≠—Ç–∞–ø": {
                status: {
                    name: "–ó–∞—è–≤–∫–∞"
                }
            },
            '–û—Ç–∫—É–¥–∞ –æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏': {
                rich_text: [
                    { text: { content: `` } }
                ]
            }
        }
    });
}

async function deleteNotionPage(pageId) {
    try {
        await notion.pages.update({
            page_id: pageId,
            archived: true
        });
        console.log("Page deleted successfully");
    } catch (error) {
        console.error("Error deleting page in Notion:", error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
function saveCompanyInfo(id, companyName) {
  let companyPairs = loadCompanyPairs(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
  companyPairs[id] = companyName;
  try {
    fs.writeFileSync(PATHS.companyPairs, JSON.stringify(companyPairs, null, 2));
    console.log("Company info saved successfully");
  } catch (error) {
    console.error("Error saving company info:", error);
  }
}

function loadCompanyPairs() {
    try {
        if (fs.existsSync(PATHS.companyPairs)) {
            const data = fs.readFileSync(PATHS.companyPairs, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error("Failed to load company pairs:", error);
    }
    return {};
}

function saveCacheId(message_id) {
    try {
        fs.writeFileSync(PATHS.cacheId, JSON.stringify({ message_id }));
        console.log("Message ID saved to cache");
    } catch (error) {
        console.error("Error saving to cacheId.json:", error);
        throw error;
    }
}

function readCacheId() {
    try {
        if (fs.existsSync(PATHS.cacheId)) {
            const data = fs.readFileSync(PATHS.cacheId, 'utf8');
            return JSON.parse(data).message_id;
        }
    } catch (error) {
        console.error("Failed to read cacheId.json:", error);
    }
    return null;
}

function clearCacheId() {
    try {
        fs.writeFileSync(PATHS.cacheId, JSON.stringify({}));
        console.log("Cache cleared");
    } catch (error) {
        console.error("Error clearing cacheId.json:", error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã messageId –∏ pageId
function saveIdPair(id, pageId) {
  let idPairs = loadIdPairs(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
  idPairs[id] = pageId;
  try {
    fs.writeFileSync(PATHS.idPairs, JSON.stringify(idPairs, null, 2));
    console.log("ID pairs saved successfully");
  } catch (error) {
    console.error("Error saving ID pairs:", error);
  }
}

function getPageIdById(id) {
    const pairs = loadIdPairs();
    console.log(`Looking up Page ID for Message ID: ${id}, found: ${pairs[id]}`);
    return pairs[id];
}

function loadIdPairs() {
    try {
        if (fs.existsSync(PATHS.idPairs)) {
            const data = fs.readFileSync(PATHS.idPairs, 'utf8');
            return JSON.parse(data);
        }
    } catch (error) {
        console.error("Failed to load or parse ID pairs:", error);
    }
    return {};
}

function readPachcaUsers(user_id) {
    try {
        const data = fs.readFileSync(PATHS.pachcaUsers, 'utf8');
        const users = JSON.parse(data);
        return users[user_id] || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
    } catch (error) {
        console.error("Failed to read or parse PachcaUsers.json:", error);
        return "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞";
    }
}

async function sendLinkMessage(thread_id, notionPageLink, messageId) {
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
        await sendTextLink(thread_id, notionPageLink);
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –¥–µ–º–æ" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º id
        const addDateResponse = await sendTextMessage(thread_id, "–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –¥–µ–º–æ");
        const parentMessageIdForDate = addDateResponse.data.id;
        console.log(`–ü–æ–ª—É—á–µ–Ω parentMessageId –¥–ª—è "–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –¥–µ–º–æ": ${parentMessageIdForDate}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        if (!messageId) {
            console.error('–û—à–∏–±–∫–∞: originalMessageId (messageId) –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º "–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É –¥–µ–º–æ"');
        }
        saveCustomIdPair(messageId, parentMessageIdForDate, 'date');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç" –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º id
        const addContextResponse = await sendTextMessage(thread_id, "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç");
        const parentMessageIdForContext = addContextResponse.data.id;
        console.log(`–ü–æ–ª—É—á–µ–Ω parentMessageId –¥–ª—è "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç": ${parentMessageIdForContext}`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        if (!messageId) {
            console.error('–û—à–∏–±–∫–∞: originalMessageId (messageId) –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"');
        }
        saveCustomIdPair(messageId, parentMessageIdForContext, 'context');

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    }
}

async function sendTextMessage(thread_id, content) {
    const url = 'https://api.pachca.com/api/shared/v1/messages';
    const body = {
        "message": {
            "entity_type": "thread",
            "entity_id": thread_id,
            "content": content
        }
    };
    const headers = {
        'Authorization': `Bearer ${process.env.PACHCA_TOKEN3}`, // –í–∞—à API —Ç–æ–∫–µ–Ω
        'Content-Type': 'application/json; charset=utf-8',
    };

    try {
        const response = await axios.post(url, body, { headers });
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ "${content}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, id: ${response.data.data.id}`);
        return response.data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å id
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è "${content}":`, error);
        throw error;
    }
}

async function sendTextLink(thread_id, content) {
    const url = 'https://api.pachca.com/api/shared/v1/messages';
    const body = {
        "message": {
            "entity_type": "thread",
            "entity_id": thread_id,
            "content": `[Link](${content})`
        }
    };
    const headers = {
        'Authorization': `Bearer ${process.env.PACHCA_TOKEN3}`, // –í–∞—à API —Ç–æ–∫–µ–Ω
        'Content-Type': 'application/json; charset=utf-8',
    };

    try {
        const response = await axios.post(url, body, { headers });
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ "${content}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, id: ${response.data.data.id}`);
        return response.data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å id
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è "${content}":`, error);
        throw error;
    }
}
function saveCustomIdPair(messageId, parentMessageId, type) {
    if (!parentMessageId) {
        console.error(`–û—à–∏–±–∫–∞: parentMessageId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å undefined. originalMessageId: ${messageId}, type: ${type}`);
        return;
    }

    if (!messageId) {
        console.error(`–û—à–∏–±–∫–∞: originalMessageId –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å undefined. parentMessageId: ${parentMessageId}, type: ${type}`);
        return;
    }

    console.log(`–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É: parent_message_id: ${parentMessageId}, originalMessageId: ${messageId}, type: ${type}`);

    let customIdPairs = loadJsonFile('./customIdPairs.json');

    // –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
    if (!customIdPairs || Object.keys(customIdPairs).length === 0) {
        console.log('–§–∞–π–ª ./customIdPairs.json –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç.');
        customIdPairs = {};
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É
    customIdPairs[parentMessageId] = { originalMessageId: messageId, type };

    fs.writeFileSync('./customIdPairs.json', JSON.stringify(customIdPairs, null, 2));
    console.log(`–ü–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${parentMessageId} -> { originalMessageId: ${messageId}, type: ${type} }`);

    // –û—á–∏—â–∞–µ–º –∫–µ—à, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ 100
    clearCacheCustomIdPairs(customIdPairs);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ customIdPairs, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –æ–±—ä–µ–∫—Ç–æ–≤
function clearCacheCustomIdPairs(customIdPairs) {
    const entries = Object.entries(customIdPairs);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ 500
    if (entries.length > 500) {
        console.log(`–ß–∏—Å—Ç–∏–º –∫–µ—à customIdPairs. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${entries.length}`);

        // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –æ–±—ä–µ–∫—Ç–æ–≤
        const limitedEntries = entries.slice(-500);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        const limitedCustomIdPairs = Object.fromEntries(limitedEntries);

        fs.writeFileSync(PATHS.customIdPairs, JSON.stringify(limitedCustomIdPairs, null, 2));
        console.log('–ö–µ—à –æ—á–∏—â–µ–Ω. –û—Å—Ç–∞–≤–ª–µ–Ω–æ 500 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤.');
    }
}

async function updateNotionDemoDateByPageId(pageId, newDate) {
    console.log(`–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion —Å pageId: ${pageId} –∏ –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π: ${newDate}`);

    try {
        await notion.pages.update({
            page_id: pageId,
            properties: {
                '–î–∞—Ç–∞ –¥–µ–º–æ': {
                    date: {
                        start: newDate
                    }
                }
            }
        });
        console.log(`–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å pageId: ${pageId} –Ω–∞ –¥–∞—Ç—É: ${newDate}`);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å pageId: ${pageId}`, error);
        throw error;
    }
}

async function addContextToNotionPage(pageId, content) {
    console.log(`–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ Notion —Å pageId: ${pageId}. –ö–æ–Ω—Ç–µ–Ω—Ç: ${content}`);

    try {
        const response = await notion.blocks.children.append({
            block_id: pageId,
            children: [
                {
                    object: 'block',
                    type: 'paragraph',
                    paragraph: {
                        rich_text: [
                            {
                                type: 'text',
                                text: {
                                    content: content
                                }
                            }
                        ]
                    }
                }
            ]
        });

        console.log(`–ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å pageId: ${pageId}`);
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —Ç–µ–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å pageId: ${pageId}`, error);
    }
}

function parseDate(dateString) {
    console.log(`–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏: ${dateString}`);

    const formats = ['DD.MM.YYYY', 'DD.MM.YY', 'DD.MM'];
    let parsedDate = null;

    for (const format of formats) {
        const date = moment(dateString, format, true);
        if (date.isValid()) {
            parsedDate = date.format('YYYY-MM-DD');
            console.log(`–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ${format}. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã: ${parsedDate}`);
            break;
        }
    }

    if (!parsedDate) {
        console.error(`–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏: ${dateString}`);
    }

    return parsedDate;
}
async function handleReactionTask(messageId, userId) {
    console.log(`–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è cron –¥–ª—è messageId: ${messageId}, userId: ${userId}`);

    // –ó–∞–≥—Ä—É–∑–∫–∞ entityMap.json
    const entityMap = loadJsonFile('./entityMap.json');
    const username = Object.keys(entityMap).find(key => entityMap[key] === userId);

    if (!username) {
        console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å userId ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ entityMap.json`);
        return;
    }

    try {
        // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è thread_id –∏ chat_id
        const urlThread = `https://api.pachca.com/api/shared/v1/messages/${messageId}/thread`;
        const headers = {
            'Authorization': `Bearer ${process.env.PACHCA_TOKEN3}`,
            'Content-Type': 'application/json; charset=utf-8',
            'User-Agent': 'Mozilla/5.0'
        };
        const responseThread = await axios.post(urlThread, {}, { headers });
        const { data } = responseThread.data;
        const chat_id = data.chat_id;
        const thread_id = data.id;

        console.log(`–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: chat_id=${chat_id}, thread_id=${thread_id}`);

        // –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ chat_id
        const urlMessages = `https://api.pachca.com/api/shared/v1/messages?chat_id=${chat_id}`;
        const responseMessages = await axios.get(urlMessages, { headers });
        const messages = responseMessages.data.data;

        // –ó–∞–≥—Ä—É–∑–∫–∞ customIdPairs.json
        const customIdPairs = loadJsonFile('./customIdPairs.json');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ parent_message_id —Å originalMessageId
        const hasMatchingMessage = messages.some(message => {
            const parentId = message.parent_message_id;
            return customIdPairs[parentId] && customIdPairs[parentId].originalMessageId === messageId;
        });

        if (!hasMatchingMessage) {
            console.log(`–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å username ${username}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥
            const urlSendMessage = 'https://api.pachca.com/api/shared/v1/messages';
            const body = {
                "message": {
                    "entity_type": "thread",
                    "entity_id": thread_id,
                    "content": username
                }
            };
            await axios.post(urlSendMessage, body, { headers });

            console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —Å username –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        } else {
            console.log('–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞–π–¥–µ–Ω–æ. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è cron:', error);
    }
}


function formatNotionPageId(pageId) {
    return pageId.replace(/-/g, '');
}

function createNotionPageLink(pageId) {
    const formattedPageId = formatNotionPageId(pageId);
    const workspaceName = process.env.WORKSPACE;
    return `https://www.notion.so/${workspaceName}/${formattedPageId}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ entityMap –∏–∑ —Ñ–∞–π–ª–∞ JSON
function loadEntityMap() {
    try {
        const data = fs.readFileSync('./entityMap.json', 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('Error loading entity map:', error);
        return {};
    }
}

cron.schedule(
    '0 9 * * *',
    async () => {
        console.log('Running daily demo check...');

        try {
            const { demoToday, scheduledDemos, unscheduledDemos } = await collectDemoData();

            const demoTodayList = demoToday
                .map(demo => `${demo.title} - ${demo.user || '@unknown'}`)
                .filter(Boolean);

            const scheduledDemosList = scheduledDemos
                .map(demo => `${demo.title} - ${moment(demo.date).format('DD.MM')} - ${demo.user || '@unknown'}`)
                .filter(Boolean);

            const unscheduledDemosList = unscheduledDemos
                .map(demo => `${demo.title} - ${demo.user || '@unknown'}`)
                .filter(Boolean);

            const report = `
üü¢–î–µ–º–æ —Å–µ–≥–æ–¥–Ω—è:
${demoTodayList.length ? '- ' + demoTodayList.join('\n- ') : '–ù–µ—Ç –¥–µ–º–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'}

üü°–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:
${scheduledDemosList.length ? '- ' + scheduledDemosList.join('\n- ') : '–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–º–æ'}

üî¥–ù–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ:
${unscheduledDemosList.length ? '- ' + unscheduledDemosList.join('\n- ') : '–ù–µ—Ç –Ω–µ–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–º–æ'}
`;

            console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –¥–µ–º–æ:', report);
            await sendDemoReport(report);
        } catch (error) {
            console.error('Error during daily demo check:', error);
        }
    },
    {
        scheduled: true,
        timezone: 'Europe/Moscow',
    }
);


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
function cleanTitle(title) {
    return title.split(', –ù–∞ —á—Ç–æ –ø—Ä–∏—à–ª–∏:')[0].trim();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function getUserByReaction(messageId) {
    const entityMap = loadEntityMap(); // –ó–∞–≥—Ä—É–∑–∫–∞ entityMap.json
    const url = `https://api.pachca.com/api/shared/v1/messages/${messageId}/reactions`;

    try {
        const response = await axios.get(url, {
            headers: {
                'Authorization': `Bearer ${process.env.PACHCA_TOKEN3}`, // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API —Ç–æ–∫–µ–Ω
                'Content-Type': 'application/json'
            }
        });

        // –ò—â–µ–º —Ä–µ–∞–∫—Ü–∏—é —Å –∫–æ–¥–æ–º "‚úÖ"
        const reaction = response.data.data.find(r => r.code === '‚úÖ');
        if (reaction) {
            const userId = reaction.user_id;
            // –ù–∞—Ö–æ–¥–∏–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ user_id –≤ entityMap
            const userName = Object.keys(entityMap).find(key => entityMap[key] === userId);
            return userName || 'unknown'; // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–µ—Ä–Ω—É—Ç—å 'unknown'
        }

        return 'unknown'; // –ï—Å–ª–∏ —Ä–µ–∞–∫—Ü–∏–∏ "‚úÖ" –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'unknown'
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API Pachca:', error);
        return 'unknown'; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 'unknown'
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ üëç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
async function sendReaction(messageId) {
    const url = `https://api.pachca.com/api/shared/v1/messages/${messageId}/reactions`;
    const headers = {
        'Authorization': `Bearer ${process.env.PACHCA_TOKEN3}`,
        'Content-Type': 'application/json; charset=utf-8',
    };
    const body = {
        "code": "üëç"
    };

    try {
        const response = await axios.post(url, body, { headers });
        console.log(`–†–µ–∞–∫—Ü–∏—è üëç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: ${messageId}`);
        return response;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: ${messageId}`, error);
        throw error;
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async function sendDemoReport(content) {
    const headers = {
      'Authorization': `Bearer ${process.env.PACHCA_TOKEN3}`, // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
      'Content-Type': 'application/json',
    };

    const url = 'https://api.pachca.com/api/shared/v1/messages/';
    const payload = {
      message: {
        entity_type: 'discussion',
        entity_id: 4624312, // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π ID –æ–±—Å—É–∂–¥–µ–Ω–∏—è
        content: content,
      },
    };

    try {
      const response = await axios.post(url, payload, { headers });
      console.log('Demo report sent successfully:', response.data);
    } catch (error) {
      console.error('Error sending demo report:', error);
      throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 –æ–±—ä–µ–∫—Ç–æ–≤
function clearCacheIfTooManyObjects() {
    const companyPairs = loadJsonFile(PATHS.companyPairs);
    const idPairs = loadJsonFile(PATHS.idPairs);

    const companyPairsCount = Object.keys(companyPairs).length;
    const idPairsCount = Object.keys(idPairs).length;

    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –±–æ–ª—å—à–µ 500, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500
    if (companyPairsCount > 500) {
        const limitedCompanyPairs = limitToLastEntries(companyPairs, 500);
        fs.writeFileSync(PATHS.companyPairs, JSON.stringify(limitedCompanyPairs, null, 2));
        console.log(`companyPairs –æ—á–∏—â–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 500 –æ–±—ä–µ–∫—Ç–æ–≤.`);
    }

    if (idPairsCount > 500) {
        const limitedIdPairs = limitToLastEntries(idPairs, 500);
        fs.writeFileSync(PATHS.idPairs, JSON.stringify(limitedIdPairs, null, 2));
        console.log(`idPairs –æ—á–∏—â–µ–Ω –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 500 –æ–±—ä–µ–∫—Ç–æ–≤.`);
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON –∏–∑ —Ñ–∞–π–ª–∞
function loadJsonFile(filePath) {
    try {
        if (fs.existsSync(filePath)) {
            const data = fs.readFileSync(filePath, 'utf8');

            if (data) {
                try {
                    return JSON.parse(data);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
                    return {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                }
            } else {
                console.log(`–§–∞–π–ª ${filePath} –ø—É—Å—Ç.`);
                return {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç
            }
        } else {
            console.log(`–§–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞.`);
            return {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
        return {}; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
function loadIdUrlMappings() {
  try {
    const raw = fs.readFileSync(PATHS.ID_URL_PATH, 'utf8');
    return JSON.parse(raw);
  } catch (err) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å idurl.json, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç.', err);
    return {};
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª
function saveIdUrlMappings(mappings) {
  try {
    fs.writeFileSync(PATHS.ID_URL_PATH, JSON.stringify(mappings, null, 2));
    console.log('idurl.json –æ–±–Ω–æ–≤–ª–µ–Ω');
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ idurl.json', err);
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫—ç—à–∞ idcom (ID –∫–æ–º–ø–∞–Ω–∏–∏ => content)
function loadIdCom() {
  try {
    return JSON.parse(fs.readFileSync(PATHS.IDCOM_PATH, 'utf8'));
  } catch {
    return {};
  }
}
function saveIdCom(obj) {
  fs.writeFileSync(PATHS.IDCOM_PATH, JSON.stringify(obj, null, 2));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function extractCompanyId(content) {
  // –ü–æ–∏—Å–∫ ID –∫–æ–º–ø–∞–Ω–∏–∏ —Å —É—á—ë—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞
  const match = content.match(/id\s*–∫–æ–º–ø–∞–Ω–∏–∏\s*:?\s*(\d+)/i);
  return match ? match[1] : null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JSON –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö n –æ–±—ä–µ–∫—Ç–æ–≤
function limitToLastEntries(obj, limit) {
    const entries = Object.entries(obj);
    const limitedEntries = entries.slice(-limit);  // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit –æ–±—ä–µ–∫—Ç–æ–≤
    return Object.fromEntries(limitedEntries);  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç
}

// –ù–æ–≤–∞—è cron-–∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
cron.schedule('0 9 * * *', () => {
    console.log('–ó–∞–ø—É—â–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á...');

    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 –æ–±—ä–µ–∫—Ç–æ–≤
    clearCacheIfTooManyObjects();
}, {
    scheduled: true,
    timezone: "Europe/Moscow"
});

app.listen(PORT, () => {
    console.log(`Server is listening on port ${PORT}`);
});;
